SET SERVEROUTPUT ON;
SET VERIFY OFF;

DROP TABLE TEMP_MEMORY;

CREATE TABLE TEMP_MEMORY(
	QUESTION_NO NUMBER,
	ANSWERED VARCHAR2(15),
	CORRECT_ANS VARCHAR2(15),
	LEVEL_Q VARCHAR2(6),
	QTP VARCHAR2(30),
	MARKS NUMBER
);

CREATE OR REPLACE PACKAGE QA_PACKAGE AS
	PROCEDURE DISPLAY_QUESTIONS(TP IN VARCHAR);
	FUNCTION MARKS_OBTAINED(CA OUT NUMBER)
	RETURN NUMBER;
	PROCEDURE SHOW_REPORT;
END QA_PACKAGE;
/

CREATE OR REPLACE PACKAGE BODY QA_PACKAGE AS
	PROCEDURE DISPLAY_QUESTIONS(TP IN VARCHAR)
	IS
	CNT NUMBER;
	ANS VARCHAR2(30);
	C_ANSWER VARCHAR2(30);
	MRK NUMBER;
	BEGIN
		CNT:=1;
		IF TP='MATHEMATICAL COMPUTATION' OR
			TP='PERMUTATION AND COMBINATION' OR 
			TP='TRIGONOMETRIC' OR
			TP='GEOMETRY' THEN
			FOR R IN (SELECT * FROM QUESTIONS@server1 WHERE Q_TYPE=TP) LOOP
				DBMS_OUTPUT.PUT_LINE('QUESTION '||CNT);           ---QUESTION PRINTING
				DBMS_OUTPUT.PUT_LINE('------------------------------------');
				DBMS_OUTPUT.PUT_LINE(R.QUESTION);
				DBMS_OUTPUT.PUT_LINE('DIFFICULTY:  '||R.DIFFICULTY);
				DBMS_OUTPUT.PUT_LINE('Q_TYPE:  '||R.Q_TYPE);
				
				SELECT ANSWER INTO C_ANSWER FROM ANSWERS@server1 WHERE QID=R.QID;  ---AUTOMATIC ANSWER TAKING FROM SERVER
				
				IF CNT>0 THEN
					ANS:=C_ANSWER;  ---ANSWER BINDING
				ELSE
					ANS:='0';  ---ANSWER BINDING
				END IF;
				
				DBMS_OUTPUT.PUT_LINE('ANSWER:  '||ANS);     ---ANSWER PRINTING
				DBMS_OUTPUT.PUT_LINE('------------------------------------');
				DBMS_OUTPUT.PUT_LINE(CHR(10));
				
				IF R.DIFFICULTY='EASY' THEN
					MRK:=2;
				ELSIF R.DIFFICULTY='MEDIUM' THEN
					MRK:=5;
				ELSE
					MRK:=10;
				END IF;
				
				INSERT INTO TEMP_MEMORY VALUES(CNT,ANS,C_ANSWER,R.DIFFICULTY,R.Q_TYPE,MRK);   ---STORING IN A TEMPORARY TABLE
				CNT:=CNT+1;
				
				COMMIT;
			END LOOP;
		ELSE
			FOR R IN (SELECT * FROM QUESTIONS@server1) LOOP
				DBMS_OUTPUT.PUT_LINE('QUESTION '||CNT);	    ---QUESTION PRINTING
				DBMS_OUTPUT.PUT_LINE('------------------------------------');
				DBMS_OUTPUT.PUT_LINE(R.QUESTION);
				DBMS_OUTPUT.PUT_LINE('DIFFICULTY:  '||R.DIFFICULTY);
				DBMS_OUTPUT.PUT_LINE('Q_TYPE:  '||R.Q_TYPE);
				
				SELECT ANSWER INTO C_ANSWER FROM ANSWERS@server1 WHERE QID=R.QID;    ---AUTOMATIC ANSWER TAKING FROM SERVER
				IF CNT>1 THEN					
					ANS:=C_ANSWER;  ---ANSWER BINDING
				ELSE
					ANS:='0';    ---ANSWER BINDING
				END IF;
				
				DBMS_OUTPUT.PUT_LINE('ANSWER:  '||ANS);   ---ANSWER PRINTING
				DBMS_OUTPUT.PUT_LINE('------------------------------------');
				DBMS_OUTPUT.PUT_LINE(CHR(10));
				
				IF R.DIFFICULTY='EASY' THEN
					MRK:=2;
				ELSIF R.DIFFICULTY='MEDIUM' THEN
					MRK:=5;
				ELSE
					MRK:=10;
				END IF;
				
				INSERT INTO TEMP_MEMORY VALUES(CNT,ANS,C_ANSWER,R.DIFFICULTY,R.Q_TYPE,MRK);    ---STORING IN A TEMPORARY TABLE
				CNT:=CNT+1;
				DBMS_OUTPUT.PUT_LINE('CNT:  '||CNT);
				
				COMMIT;
			END LOOP;
		END IF;
	END DISPLAY_QUESTIONS;
	
	FUNCTION MARKS_OBTAINED(CA OUT NUMBER) ---MARKS CALCULATING
	RETURN NUMBER
	IS
	MK NUMBER:=0;
	BEGIN
		CA:=0;
		FOR R IN (SELECT * FROM TEMP_MEMORY) LOOP  
			IF R.ANSWERED=R.CORRECT_ANS THEN
				MK:=MK+R.MARKS;
				CA:=CA+1;
			END IF;
		END LOOP;
		
		RETURN MK;
		
	END MARKS_OBTAINED;
	
	PROCEDURE SHOW_REPORT   ---REPORT GENERATING
	IS
	BEGIN
		DBMS_OUTPUT.PUT_LINE('QNO  '||'ANSWERED '||'CORRECT  ');
		DBMS_OUTPUT.PUT_LINE('---- '||'-------  '||'-------  ');
		FOR R IN (SELECT * FROM TEMP_MEMORY) LOOP
			DBMS_OUTPUT.PUT_LINE(R.QUESTION_NO||'     '||R.ANSWERED||'       '||R.CORRECT_ANS);
		END LOOP;
	END SHOW_REPORT;
	
END QA_PACKAGE;
/

CREATE OR REPLACE PROCEDURE TEST_SKILL(TYP_ IN NUMBER)
IS

INVALID EXCEPTION;
TOT_MARKS NUMBER;
ATTAINED_MARKS NUMBER;
TOT_Q NUMBER;
CORRECTLY_ANSWERED NUMBER;
SID NUMBER;
SNAME VARCHAR(15);
QUES_TYPE VARCHAR2(30);

BEGIN
	DBMS_OUTPUT.PUT_LINE(CHR(10));
	DBMS_OUTPUT.PUT_LINE('HARD: 10'||CHR(10)||'MEDIUM: 5'||CHR(10)||'EASY: 2');
	DBMS_OUTPUT.PUT_LINE(CHR(10));
	DBMS_OUTPUT.PUT_LINE('QUESTIONS:  ');
	DBMS_OUTPUT.PUT_LINE('+++++++++++++++++');
	DBMS_OUTPUT.PUT_LINE(CHR(10));
	
	CASE TYP_
		WHEN 1 THEN
			QA_PACKAGE.DISPLAY_QUESTIONS('MATHEMATICAL COMPUTATION');
		WHEN 2 THEN
			QA_PACKAGE.DISPLAY_QUESTIONS('PERMUTATION AND COMBINATION');
		WHEN 3 THEN
			QA_PACKAGE.DISPLAY_QUESTIONS('TRIGONOMETRIC');
		WHEN 4 THEN
			QA_PACKAGE.DISPLAY_QUESTIONS('GEOMETRY');
		WHEN 5 THEN
			QA_PACKAGE.DISPLAY_QUESTIONS(NULL);
		ELSE
			RAISE INVALID;
	END CASE;
	
	SELECT COUNT(QUESTION_NO) INTO TOT_Q FROM TEMP_MEMORY;
	SELECT SUM(MARKS) INTO TOT_MARKS FROM TEMP_MEMORY;
	
	ATTAINED_MARKS:=QA_PACKAGE.MARKS_OBTAINED(CORRECTLY_ANSWERED);
	
	DBMS_OUTPUT.PUT_LINE(CHR(10));
	DBMS_OUTPUT.PUT_LINE('REPORT OF TEST: ');
	DBMS_OUTPUT.PUT_LINE('**************');
	QA_PACKAGE.SHOW_REPORT;
	
	DBMS_OUTPUT.PUT_LINE(CHR(10));
	DBMS_OUTPUT.PUT_LINE('TOT_Q:  '||TOT_Q||'  TOT_MARKS:  '||TOT_MARKS);
	DBMS_OUTPUT.PUT_LINE('CQ:  '||CORRECTLY_ANSWERED||'  ATTAINED_MARKS:  '||ATTAINED_MARKS);
	DBMS_OUTPUT.PUT_LINE(CHR(10));
	
	
	SELECT ID,NAME INTO SID,SNAME FROM CURRENT_RECORD;
	--DBMS_OUTPUT.PUT_LINE(SID||'   '||SNAME);
	SELECT QTP INTO QUES_TYPE FROM TEMP_MEMORY WHERE QUESTION_NO=1;
	--DBMS_OUTPUT.PUT_LINE('QUES TYPE:  '||QUES_TYPE);
	SAVE_RECORD(SID,SNAME,QUES_TYPE,TOT_Q,CORRECTLY_ANSWERED,ATTAINED_MARKS,TOT_MARKS,SYSDATE); ---SAVING THE TEST REPORT
	
	EXCEPTION
		WHEN INVALID THEN
			DBMS_OUTPUT.PUT_LINE('INVALID INPUT!!');
END;
/